#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---

resource_types:
  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource
  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource
  - name: concourse-metadata-resource
    type: docker-image
    source:
      username: ((!docker-username))
      password: ((!docker-password))
      repository: gcr.io/apachegeode-ci/((!docker-image-prefix))concourse-metadata-resource
      tag: latest

resources:
- name: docker-geode-build-image
  type: docker-image
  source:
    username: ((!docker-username))
    password: ((!docker-password))
    repository: gcr.io/apachegeode-ci/((!docker-image-prefix))((!docker-image-name))
    tag: latest
- name: geode
  type: git
  source:
    depth: 1
    uri: (( concat "https://github.com/" metadata.geode-fork "/geode.git" ))
    branch: (( grab metadata.geode-build-branch ))
    ignore_paths:
    - ci/*
- name: geode-ci
  type: git
  source:
    depth: 1
    uri: (( concat "https://github.com/" metadata.geode-fork "/geode.git" ))
    branch: (( grab metadata.geode-build-branch ))
    paths:
    - ci/pipelines/geode-build/*
    - ci/scripts/*
- name: geode-ci-windows
  type: git
  source:
    depth: 1
    uri: (( concat "https://github.com/" metadata.geode-fork "/geode.git" ))
    branch: feature/GEODE-5212
    paths:
    - ci/*
- name: geode-examples
  type: git
  source:
    uri: https://github.com/apache/geode-examples.git
    branch: develop
    depth: 10
- name: geode-build-version
  type: semver
  source:
    driver: gcs
    bucket: ((!concourse-bucket))
    key: (( concat metadata.geode-build-branch "/version" ))
    json_key: ((!concourse-gcp-key))
    initial_version: 1.3.0
- name: geode-build-artifact
  type: gcs-resource
  source:
    bucket: ((!public-bucket))
    json_key: ((!concourse-gcp-key))
    regexp: (( concat "artifacts/" metadata.geode-build-branch "/geodefiles-(.*).tgz" ))
- name: send-notification-email
  type: email
  source:
    smtp:
      host: ((!source-email-server))
      port: "587"
      username: ((!source-email-username))
      password: ((!source-email-password))
    from: ((!source-email-address))
    to: [ ((!notification-email-address)) ]
- name: concourse-metadata-resource
  type: concourse-metadata-resource

groups:
- name: main
  jobs:
  - Build
  - DistributedTest
  - AcceptanceTest
  - IntegrationTest
  - UpgradeTest
  - TestExamples
  - UpdatePassingRef
- name: Windows
  jobs:
  - Build
  - WindowsAcceptanceTests
  - WindowsIntegrationTests

jobs:
- name: Build
  serial: true
  public: true
  plan:
    - get: geode
      trigger: true
    - get: geode-ci
    - get: geode-build-version
      params: {pre: build}
    - task: build
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            username: ((!docker-username))
            password: ((!docker-password))
            repository: gcr.io/apachegeode-ci/((!docker-image-prefix))((!docker-image-name))
            tag: latest
        inputs:
        - name: geode
        - name: geode-ci
        - name: geode-build-version
        outputs:
        - name: built-geode
        - name: results
        params:
          MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          PUBLIC_BUCKET: ((!public-bucket))
        run:
          path: geode-ci/ci/scripts/build.sh
      on_failure:
        aggregate:
          - put: send-notification-email
            params:
              subject: results/subject
              body: results/body
      ensure:
        aggregate:
          - put: geode-build-artifact
            params:
              file: built-geode/geodefiles-*.tgz
          - put: geode-build-version
            params:
              file: results/number
- name: TestExamples
  serial: true
  public: true
  plan:
    - get: geode
      passed: [AcceptanceTest, DistributedTest, IntegrationTest, UpgradeTest]
      trigger: true
    - aggregate:
      - get: geode-ci
      - get: geode-examples
        trigger: true
      - get: docker-geode-build-image
        params:
          rootfs: true
    - task: testexamples
      image: docker-geode-build-image
      privileged: true
      timeout: 7h
      config:
        inputs:
          - name: geode-ci
          - name: geode-examples
          - name: docker-geode-build-image
        platform: linux
        params:
          MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          PUBLIC_BUCKET: ((!public-bucket))
        run:
          args:
          path: geode-ci/ci/scripts/build-examples.sh

- name: UpdatePassingRef
  serial: true
  public: true
  plan:
    - get: geode
      passed: [AcceptanceTest, DistributedTest, IntegrationTest, UpgradeTest]
      trigger: true
    - get: geode-ci
    - get: docker-geode-build-image
    - task: updatepassingref
      image: docker-geode-build-image
      config:
        inputs:
          - name: geode
          - name: geode-ci
        platform: linux
        outputs:
          - name: results
        params:
          MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          PUBLIC_BUCKET: ((!public-bucket))
        run:
          path: geode-ci/ci/scripts/update-passing-ref.sh

- name: WindowsAcceptanceTests
  serial: true
  public: true
  plan:
    - aggregate:
      - get: geode
        passed: [Build]
        trigger: true
      - get: geode-ci-windows
      - get: geode-build-version
        passed: [Build]
    - task: cleanup-java-processes
      tags: [windows-acceptance-tests]
      config:
        platform: windows
        run:
          path: powershell
          args:
          - -command
          - |
            gwmi win32_process -filter 'name = "java.exe"' | select commandline | format-list
            kill -name java
    - task: run-acceptance-tests
      tags: [windows-acceptance-tests]
      timeout: 8h
      config:
        inputs:
          - name: geode
          - name: geode-ci-windows
            path: geode-ci
          - name: geode-build-version
        outputs:
          - name: built-geode
        params:
          CALL_STACK_TIMEOUT: 25200
          DUNIT_PARALLEL_FORKS: 0
          MAINTENANCE_VERSION: develop
          PARALLEL_DUNIT: false
          PUBLIC_BUCKET: ((!public-bucket))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          JAVA_HOME: "C:\\progra~1\\java\\jdk1.8.0_172"
          DOCKER_COMPOSE_LOCATION: "C:\\Progra~1\\Docker\\Docker\\resources\\bin\\docker-compose.exe"
          DOCKER_LOCATION: "C:\\Progra~1\\Docker\\Docker\\resources\\bin\\docker.exe"
        platform: windows
        run:
          path: c:\Progra~1\git\bin\bash.exe
          args:
            - geode-ci/ci/scripts/test-run.sh
            #- :geode-assembly:acceptanceTest :geode-connectors:acceptanceTest
            - :geode-assembly:acceptanceTest
            - windows-acceptancetestfiles
      ensure:
        aggregate:
        - task: archive-acceptance-test-results
          tags: [windows-acceptance-tests]
          config:
            inputs:
              - name: geode
              - name: geode-ci-windows
                path: geode-ci
              - name: geode-build-version
              - name: built-geode
            params:
              MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
              SERVICE_ACCOUNT: ((!concourse-gcp-account))
              PUBLIC_BUCKET: ((!public-bucket))
              JAVA_HOME: "C:\\progra~1\\java\\jdk1.8.0_172"
            platform: windows
            run:
              path: c:\Progra~1\git\bin\bash.exe
              args:
              - geode-ci/ci/scripts/test-archive.sh
              - :geode-assembly:acceptanceTest
              - windows-acceptancetestfiles

- name: WindowsIntegrationTests
  serial: true
  public: true
  plan:
    - aggregate:
      - get: geode
        passed: [Build]
        trigger: true
      - get: geode-ci-windows
      - get: geode-build-version
        passed: [Build]
    - task: cleanup-java-processes
      tags: [windows-integration-tests]
      config:
        platform: windows
        run:
          path: powershell
          args:
          - -command
          - |
            gwmi win32_process -filter 'name = "java.exe"' | select commandline | format-list
            kill -name java
    - task: run-integration-tests
      tags: [windows-integration-tests]
      timeout: 8h
      config:
        inputs:
          - name: geode
          - name: geode-ci-windows
            path: geode-ci
          - name: geode-build-version
        outputs:
          - name: built-geode
        params:
          CALL_STACK_TIMEOUT: 25200
          DUNIT_PARALLEL_FORKS: 0
          MAINTENANCE_VERSION: develop
          PARALLEL_DUNIT: false
          PUBLIC_BUCKET: ((!public-bucket))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          JAVA_HOME: "C:\\progra~1\\java\\jdk1.8.0_172"
        platform: windows
        run:
          path: c:\Progra~1\git\bin\bash.exe
          args:
            - geode-ci/ci/scripts/test-run.sh
            - integrationTest
            - windows-integrationtestfiles
      ensure:
        aggregate:
        - task: archive-integration-test-results
          tags: [windows-integration-tests]
          config:
            inputs:
              - name: geode
              - name: geode-ci-windows
                path: geode-ci
              - name: geode-build-version
              - name: built-geode
            params:
              MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
              SERVICE_ACCOUNT: ((!concourse-gcp-account))
              PUBLIC_BUCKET: ((!public-bucket))
              JAVA_HOME: "C:\\progra~1\\java\\jdk1.8.0_172"
            platform: windows
            run:
              path: c:\Progra~1\git\bin\bash.exe
              args:
                - geode-ci/ci/scripts/test-archive.sh
                - integrationTest
                - windows-integrationtestfiles

- name: DistributedTest
  serial: true
  public: true
  plan:
    - aggregate:
      - get: geode
        passed: [Build]
        trigger: true
      - get: geode-ci
      - get: geode-build-version
        passed: [Build]
      - get: docker-geode-build-image
        params:
          rootfs: true
    - aggregate:
      - task: run-distributed-core
        image: docker-geode-build-image
        tags: [large]
        privileged: true
        timeout: 8h
        config:
          inputs:
            - name: geode
            - name: geode-ci
            - name: docker-geode-build-image
            - name: geode-build-version
          platform: linux
          outputs:
            - name: built-geode
          params:
            MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
            SERVICE_ACCOUNT: ((!concourse-gcp-account))
            PUBLIC_BUCKET: ((!public-bucket))
            PARALLEL_DUNIT: true
            DUNIT_PARALLEL_FORKS: 7
            CALL_STACK_TIMEOUT: 25200
          run:
            args:
            - geode-core:distributedTest
            - distributedtestcore
            path: geode-ci/ci/scripts/test-run.sh
        on_failure:
          aggregate:
            - put: send-notification-email
              params:
                subject: built-geode/subject
                body: built-geode/body
        ensure:
          aggregate:
          - task: archive-results-core
            image: docker-geode-build-image
            config:
              inputs:
                - name: geode
                - name: geode-ci
                - name: geode-build-version
                - name: built-geode
              platform: linux
              params:
                MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
                SERVICE_ACCOUNT: ((!concourse-gcp-account))
                PUBLIC_BUCKET: ((!public-bucket))
              run:
                args:
                - geode-core:distributedTest
                - distributedtestcore
                path: geode-ci/ci/scripts/test-archive.sh
      - task: run-distributed-everything-else
        image: docker-geode-build-image
        tags: [large]
        privileged: true
        timeout: 8h
        config:
          inputs:
            - name: geode
            - name: geode-ci
            - name: docker-geode-build-image
            - name: geode-build-version
          platform: linux
          outputs:
            - name: built-geode
          params:
            MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
            SERVICE_ACCOUNT: ((!concourse-gcp-account))
            PUBLIC_BUCKET: ((!public-bucket))
            PARALLEL_DUNIT: true
            DUNIT_PARALLEL_FORKS: 7
            CALL_STACK_TIMEOUT: 25200
            GRADLE_TASK_OPTIONS: -x geode-core:distributedTest
          run:
            args:
            - distributedTest
            - distributedtesteverythingelse
            path: geode-ci/ci/scripts/test-run.sh
        on_failure:
          aggregate:
            - put: send-notification-email
              params:
                subject: built-geode/subject
                body: built-geode/body
        ensure:
          aggregate:
          - task: archive-results-everythingelse
            image: docker-geode-build-image
            config:
              inputs:
                - name: geode
                - name: geode-ci
                - name: geode-build-version
                - name: built-geode
              platform: linux
              params:
                MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
                SERVICE_ACCOUNT: ((!concourse-gcp-account))
                PUBLIC_BUCKET: ((!public-bucket))
              run:
                args:
                - disitributedTest
                - distributedtesteverythingelse
                path: geode-ci/ci/scripts/test-archive.sh
